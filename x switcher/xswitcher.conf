# xswitcher config file. Uses TOML markup language.

# actions = (Add, Drop, Test), key codes are defined in "keys.go".
# !!! To be converted into jump matrix inside. Avoid stupid cyclic tests!!!
[ActionKeys]
 # Collect key and do the test for command sequence
 Add = ["1..0", "=", "BS", "Q..]", "L_CTRL..CAPS", "N_LOCK", "S_LOCK",
        "KP7..KPDOT", "R_CTRL", "KPSLASH", "R_ALT", "KPEQUAL..PAUSE",
        "KPCOMMA", "L_META..COMPOSE", "KPLEFTPAREN", "KPRIGHTPAREN"]

 # Drop all collected keys, including this.  This is default action.
 Drop = ["ESC", "-", "TAB", "ENTER", "KPENTER", "LINEFEED..POWER"]
 # State of these keys must persist between buffer drops.
 # ??? How to deal with CAPS and "LOCK"-keys ???
 StateKeys = ["L_CTRL", "L_SHIFT", "L_ALT", "L_META", "CAPS", "N_LOCK", "S_LOCK",
              "R_CTRL", "R_SHIFT", "R_ALT", "R_META"]

 # Test only, but don't collect.
 # E.g., I use F12 instead of BREAK on dumb laptops whith shitty keyboards (new ThinkPads)
 Test = ["F1..F10", "ZENKAKUHANKAKU", "102ND", "F11", "F12",
          "RO..KPJPCOMMA", "SYSRQ", "SCALE", "HANGEUL..YEN",
          "STOP..SCROLLDOWN", "NEW..MAX"]


# Some behaviour can depend on application currently doing the input.
[[WindowClasses]]
 # VNC, VirtualBox, qemu etc. emulates there input independently, so never intercept.
 # With the exception of some stupid VNC clients, which does high-level (layout-based) keyboard input.
 Regex = "^VirtualBox"
 Actions = "" # Do nothing while focus stays in VirtualBox

[[WindowClasses]]
 Regex = "^konsole"
 # In general, mouse clicks leads to unpredictable (at the low-level where xswitcher resides) cursor jumps.
 # So, it's good choise to drop all buffers after click.
 # But some windows, e.g. terminals, can stay out of this problem.
 MouseClickDrops = 0
 Actions = "Actions"

[[WindowClasses]] # Default behaviour: no Regex (or wildcard like ".")
 MouseClickDrops = 1
 Actions = "Actions"


# action = [ regex1, regex2, ... ]
# "CLEAN" state: all keys are released
[Actions] # ToDo: construct obvious syntax to describe key sequences
 # Drop word buffer and start collecting new one
 NewWord = ""
 # Drop all buffers
 NewSentence = ""


 Switch1 = []
 Switch2 = []

 Layout1 = []
 Layout2 = []
 Layout3 = []
 Layout4 = []

 [Actions.Hook]
  [Actions.Hook.1]
   regex = []
  [Actions.Hook.2]
   regex = []
  [Actions.Hook.3]
   regex = []
  [Actions.Hook.4]
   regex = []
  [Actions.Hook.5]
   regex = []

[Layout] # Direct layout selection
 Layout1 = 0
 Layout2 = 1
 Layout3 = 2
 Layout4 = 3


[Switch] # Cyclic layout switching
 Switch1 = [0, 1]
 Switch2 = [2, 3, 4]

[Hook] # Run external commands
 [Hook.1]
  Exec = "/path/to/exec -a -b --key_x"
  Wait = 1
 [Hook.2]
  Exec = ""
 [Hook.3]
  Exec = ""
 [Hook.4]
  Exec = ""
 [Hook.5]
  Exec = ""
